require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/articles", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Article. As you add validations to Article, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    skip("Add a hash of attributes valid for your model")
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # ArticlesController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) {
    {}
  }

  describe "GET /api/v1/articles" do
    subject { get(api_v1_articles_path) }
    # before { create_list(:article, 3)}

    let!(:article1) { create(:article, updated_at: 1.days.ago, status: 0) }
    let!(:article2) { create(:article, updated_at: 1.days.ago, status: 1) }
    let!(:article3) { create(:article, updated_at: 2.days.ago, status: 0) }
    let!(:article4) { create(:article, updated_at: 2.days.ago, status: 1) }
    let!(:article5) { create(:article, status: 0) }
    let!(:article6) { create(:article, status: 1) }

    it "公開されている article の一覧が作成順に取得できる" do
      subject
      res = JSON.parse(response.body)
      expect(res.length).to eq 3
      expect(res[0].keys).to eq ["id", "title", "updated_at", "user"]
      expect(response).to have_http_status(:ok)
      expect(res.map {|d| d["id"] }).to eq [article6.id, article2.id, article4.id]
      expect(res[0]["user"].keys).to eq ["id", "name", "email"]
    end
  end

  describe "GET /api/v1/articles/:id" do
    subject { get(api_v1_article_path(article_id)) }

    context "対象の記事が公開中の時" do
      let(:article_id) { article.id }
      let(:article) { create(:article, :published) }

      it "article の詳細が取得できる" do
        subject
        res = JSON.parse(response.body)
        expect(res["id"]).to eq article.id
        expect(res["title"]).to eq article.title
        expect(res["body"]).to eq article.body
        expect(res["updated_at"]).to be_present
        expect(res["user"]["id"]).to eq article.user.id
        expect(res["user"]["name"]).to eq article.user.name
        expect(res["user"]["email"]).to eq article.user.email
        expect(res["user"].keys).to eq ["id", "name", "email"]
        expect(response).to have_http_status(:ok)
      end
    end

    context "対象の記事が下書きの時" do
      let(:article_id) { article.id }
      let(:article) { create(:article, status: 0) }

      it "表示されない" do
        expect { subject }.to raise_error(ActiveRecord::RecordNotFound)
      end
    end

    context "指定した id の article が存在しない時" do
      let(:article_id) { 100_000_000_000_000_000 }

      it "article が見つからない" do
        expect { subject }.to raise_error(ActiveRecord::RecordNotFound)
      end
    end
  end

  describe "POST /api/v1/articles" do
    subject { post(api_v1_articles_path, params: params, headers: headers) }

    let(:current_user) { create(:user) }
    let(:headers) { current_user.create_new_auth_token }

    context "公開状態で記事を作成した時" do
      let(:params) { { article: attributes_for(:article, status: "published") } }

      it "記事が作成できる" do
        expect { subject }.to change { Article.where(user_id: current_user.id).count }.by(1)
        res = JSON.parse(response.body)
        expect(res["user"]["id"]).to eq current_user.id
        expect(res["user"]["name"]).to eq current_user.name
        expect(res["user"]["email"]).to eq current_user.email
        expect(res["title"]).to eq params[:article][:title]
        expect(res["body"]).to eq params[:article][:body]
        expect(res["status"]).to eq params[:article][:status]
        expect(response).to have_http_status(:ok)
      end
    end

    context "記事を下書き状態で作成した時" do
      let(:params) { { article: attributes_for(:article, status: "draft") } }

      it "下書き記事が作成できる" do
        expect { subject }.to change { Article.where(user_id: current_user.id).count }.by(1)
        res = JSON.parse(response.body)
        expect(res["user"]["id"]).to eq current_user.id
        expect(res["user"]["name"]).to eq current_user.name
        expect(res["user"]["email"]).to eq current_user.email
        expect(res["title"]).to eq params[:article][:title]
        expect(res["body"]).to eq params[:article][:body]
        expect(res["status"]).to eq params[:article][:status]
        expect(response).to have_http_status(:ok)
      end
    end

    context "不適切なパラメーターを送信した時" do
      let(:params) { attributes_for(:article) }
      let(:current_user) { create(:user) }
      let(:headers) { current_user.create_new_auth_token }

      it "エラーする" do
        expect { subject }.to raise_error(ActionController::ParameterMissing)
      end
    end
  end

  describe "PATCH /api/v1/articles/:id" do
    subject { patch(api_v1_article_path(article.id), params: params, headers: headers) }

    let(:current_user) { create(:user) }
    let(:params) { { article: { title: Faker::Lorem.word, status: "published", created_at: 1.day.ago } } }
    let(:headers) { current_user.create_new_auth_token }

    context "自分が所持している記事のレコードを更新しようとした時" do
      let!(:article) { create(:article, status: "draft", user: current_user) }

      it "任意のユーザーの記事が更新される" do
        expect { subject }.to change { article.reload.title }.from(article.title).to(params[:article][:title]) &
                              change { article.reload.status }.from(article.status).to(params[:article][:status]) &
                              not_change { article.body } &
                              not_change { article.created_at }
        expect(response).to have_http_status(:ok)
      end
    end

    context "自分が所持していないレコードを更新しようとした時" do
      let!(:article) { create(:article, user: other_user) }
      let(:other_user) { create(:user) }

      it "記事の更新に失敗する" do
        expect { subject }.to raise_error(ActiveRecord::RecordNotFound)
      end
    end
  end

  describe "DELETE /api/v1/articles/:id" do
    subject { delete(api_v1_article_path(article.id), headers: headers) }

    let(:current_user) { create(:user) }
    let(:headers) { current_user.create_new_auth_token }

    context "指定した id の記事が存在するとき" do
      let!(:article) { create(:article, user: current_user) }

      it "記事が削除される" do
        expect { subject }.to change { Article.where(user_id: current_user.id).count }.by(-1)
        expect(response.body).to eq ""
        expect(response).to have_http_status(:no_content)
      end
    end

    context "指定した id の記事が存在しない時" do
      let!(:article) { create(:article, user: other_user) }
      let(:other_user) { create(:user) }

      it "記事の削除に失敗する" do
        expect { subject }.to raise_error(ActiveRecord::RecordNotFound) &
                              change { Article.where(user_id: current_user.id).count }.by(0)
      end
    end
  end
end
